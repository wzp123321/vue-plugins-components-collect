import { postRequest } from '../../../services/request';
const treeBindingService = {
  /**
   * 获取绑点列表
   * @param params
   */
  async getBindingTreeListByTreeId(params: {
    energyCode: string;
    treeId: number;
  }): Promise<HttpRequestModule.ResTemplate<TreeBindingModule.TreeBindingInfo>> {
    const res: HttpRequestModule.ResTemplate<TreeBindingModule.TreeBindingInfo> = await postRequest(
      '/admin/tree/bind/point/detail',
      params,
    );
    return res;
  },
  /**
   * 绑点
   * @param params
   */
  async getTreeBind(params: {
    autoGenerated: number;
    energyCode: string;
    //formula: string;
    name: string;
    points: Array<{
      deviceId: number;
      pointNumber: number;
      standardPointCode: string;
    }>;
    treeId: number;
  }): Promise<HttpRequestModule.ResTemplate<boolean>> {
    const res: HttpRequestModule.ResTemplate<boolean> = await postRequest('/admin/tree/bind/point/add', params);
    return res;
  },
  /**
   * 修改绑点
   * @param params
   */
  async getTreeBindUpdate(params: {
    autoGenerated: number;
    energyCode: string;
    // formula: string;
    id: number;
    name: string;
    points: Array<{
      deviceId: number;
      pointNumber: number;
      standardPointCode: string;
    }>;
    treeId: number;
  }): Promise<HttpRequestModule.ResTemplate<boolean>> {
    const res: HttpRequestModule.ResTemplate<boolean> = await postRequest('/admin/tree/bind/point/update', params);
    return res;
  },
  /**
   * 一键刷新
   * @param params
   */
  async getTreeBindRefresh(params: {
    energyCode: string;
    treeType: number;
  }): Promise<HttpRequestModule.ResTemplate<boolean>> {
    const res: HttpRequestModule.ResTemplate<boolean> = await postRequest('/admin/tree/bind/point/auto/calc', params);
    return res;
  },
  /**
   * 解绑单个分类分项
   * @param params
   */
  async getTreeUnBind(params: number): Promise<HttpRequestModule.ResTemplate<boolean>> {
    const res: HttpRequestModule.ResTemplate<boolean> = await postRequest(
      '/admin/tree/bind/point/single/delete',
      params,
    );
    return res;
  },
  /**
   * 获取站点列表
   * @param params
   */
  async getConcentratorList(): Promise<HttpRequestModule.ResTemplate<TreeBindingModule.ConcentratorInfo[]>> {
    const res: HttpRequestModule.ResTemplate<TreeBindingModule.ConcentratorInfo[]> = await postRequest(
      '/admin/tree/bind/point/feign/concentrators',
    );
    return res;
  },
  /**
   * 获取设备列表
   * @param params
   */
  async getDeviceList(params: {
    id: number;
    energyCode: string;
  }): Promise<HttpRequestModule.ResTemplate<TreeBindingModule.ConcentratorInfo[]>> {
    const res: HttpRequestModule.ResTemplate<TreeBindingModule.ConcentratorInfo[]> = await postRequest(
      '/admin/tree/bind/point/feign/concentrator/devices',
      params,
    );
    return res;
  },
  /**
   * 查询设备下的点位列表
   * @param params
   * @returns
   */
  async getPointListByDeviceId(params: { energyCode: string; id: number }) {
    const reqUrl = '/admin/tree/bind/point/feign/device/points';
    const res: HttpRequestModule.ResTemplate<TreeBindingModule.DevicePointInfoListInfo[]> = await postRequest(
      reqUrl,
      params,
    );
    return res;
  },
  /**
   * 是否有点位
   * @returns
   */
  async getIsHaveData() {
    const reqUrl = '/admin/tree/bind/point/isHaveData';
    const res: HttpRequestModule.ResTemplate<boolean> = await postRequest(reqUrl, '');
    return res;
  },
};

export default treeBindingService;

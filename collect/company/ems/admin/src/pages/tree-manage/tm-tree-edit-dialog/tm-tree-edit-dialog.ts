import { defineComponent, ref, PropType, reactive } from 'vue';
import { ElForm, ElMessage } from 'element-plus';
import { cloneDeep } from 'lodash';
import { querySpaceCenterListByType } from '../utils/index';
import { formatDate, getTreeExpandKeys } from '../../../utils/index';
import message from '../../../utils/message';

import treeManageService from '@/pages/tree-manage/service/tree-manage.service';
import {
  TM_ILocationVO,
  TM_ICodeName,
  TM_ITreeManageDetail,
  TM_ITreeManageVO,
  TM_NODE_TYPES,
  TM_TREE_TYPE,
  TM_ITreeEditorParams,
  TM_DefaultProps,
  TM_NodeKey,
  TM_IDepartmentHistoryVO,
} from '../tree-manage.api';

import { customPrefix, customClose } from '../../../config/index';

const initialTree = {
  area: '',
  autoGenerated: '',
  childTree: [],
  fatherNodeType: '',
  hospitalCode: [],
  hospitalName: '',
  id: '',
  lockFlag: '',
  nodeType: '',
  nodeTypeText: '',
  parentId: '',
  parentIds: '',
  treeLeaf: 0,
  treeLevel: 0,
  treeName: '',
  treeNames: '',
  treeSort: '',
  treeType: '',
  treeTypeText: '',
};

export default defineComponent({
  name: 'TreeManageEdit',
  props: {
    // 节点类型
    nodeTypeDataList: {
      type: Array as PropType<TM_ICodeName[]>,
      default: [],
    },
    // 当前树类型
    searchedTreeType: {
      type: String,
      default: '',
    },
  },
  emits: ['editSuccess'],
  setup(props, { emit }) {
    const editFormRef = ref(ElForm);
    // 空间列表
    const locationList = ref<TM_ILocationVO[]>([]);
    // loading
    const loading = ref<boolean>(false);
    // 开关
    const visible = ref<boolean>(false);
    // 科室树
    const departmentList = ref<TM_ITreeManageVO[]>([]);
    // 详情
    const pageForm = ref<TM_ITreeManageDetail>(initialTree);
    const locationExpandedKeys = ref<number[]>([]);
    const locationLoading = ref<boolean>(false);
    const departmentLoading = ref<boolean>(false);
    const departmentExpandedKeys = ref<number[]>([]);
    // 顶级节点时才展示
    const nodeTypeList = ref<TM_ICodeName[]>([]);
    const historyList = ref<TM_IDepartmentHistoryVO[]>([]);
    const submitting = ref<boolean>(false);
    /**
     * 校验规则
     */
    const rules = reactive({
      id: [{ required: true, message: '请输入id', trigger: 'blur' }],
      treeName: [
        { required: true, message: '请输入节点名称', trigger: 'blur' },
        { max: 20, message: '最多20个字', trigger: 'blur' },
      ],
      treeSort: [{ required: true, message: '请输入本级排序号', trigger: 'blur' }],
      effectiveStartTime: [
        {
          required: true,
          message: '请选择生效开始时间',
          trigger: ['blur', 'change'],
        },
      ],
    });

    const mapStartDateDisabled = (date: Date) => {
      return pageForm.value.effectiveEndTime
        ? (date.getTime() > pageForm.value.effectiveEndTime.getTime() &&
            formatDate(date, 'yyyy-MM-dd') !== formatDate(pageForm.value.effectiveEndTime, 'yyyy-MM-dd')) ||
            date.getTime() > new Date().getTime()
        : date.getTime() > new Date().getTime();
    };
    const mapEndDateDisabled = (date: Date) => {
      return pageForm.value.effectiveStartTime
        ? (date.getTime() < pageForm.value.effectiveStartTime.getTime() &&
            formatDate(date, 'yyyy-MM-dd') !== formatDate(pageForm.value.effectiveStartTime, 'yyyy-MM-dd')) ||
            date.getTime() > new Date().getTime()
        : date.getTime() > new Date().getTime();
    };
    const mapHospitalCodeFormItem = () => {
      return !(pageForm.value.treeType === TM_TREE_TYPE.科室树 || pageForm.value.nodeType === '') && visible.value;
    };
    const mapDepartmentFormItem = () => {
      return pageForm.value.treeType === TM_TREE_TYPE.区域树 && pageForm.value.nodeType === TM_NODE_TYPES.科室;
    };
    const mapNodeType = () => {
      return pageForm.value.treeType !== TM_TREE_TYPE.科室树;
    };

    let editNode: TM_ITreeManageVO;
    // 打开
    const handleShow = async (data: TM_ITreeManageVO) => {
      historyList.value = [];
      loading.value = true;
      visible.value = true;
      editNode = data;
      await queryTreeDetail(data?.id);
      initNodeType();
      // 如果是区域树且科室类型科室需要查询关联科室 节点历史关联信息 科室树
      if (pageForm.value.treeType === TM_TREE_TYPE.区域树 && pageForm.value.nodeType === TM_NODE_TYPES.科室) {
        initDepartment();
      }
      // 如果是业态或者支路 查询空间中心树
      if (pageForm.value.treeType !== TM_TREE_TYPE.科室树) {
        initLocation();
        loading.value = false;
      }
    };
    /**
     * 根据id查询详情
     * @param treeId
     */
    const queryTreeDetail = async (treeId: string) => {
      try {
        loading.value = true;
        const res = await treeManageService.getTreeDetailById(treeId);
        if (res?.code === 200 && res?.data) {
          pageForm.value.area = res?.data?.area ?? '';
          pageForm.value.autoGenerated = res?.data?.autoGenerated ?? '';
          pageForm.value.childTree = res?.data?.childTree ?? [];
          pageForm.value.fatherNodeType = res?.data?.fatherNodeType ?? '';
          pageForm.value.hospitalCode = res?.data?.hospitalCode ? [res?.data?.hospitalCode] : [];
          pageForm.value.hospitalName = res?.data?.hospitalName ?? '';
          pageForm.value.id = res?.data?.id ?? '';
          pageForm.value.lockFlag = res?.data?.lockFlag ?? '';
          pageForm.value.nodeType = res?.data?.nodeType ?? '';
          pageForm.value.nodeTypeText = res?.data?.nodeTypeText ?? '';
          pageForm.value.parentId = res?.data?.parentId ?? '';
          pageForm.value.parentIds = res?.data?.parentIds ?? '';
          pageForm.value.treeLeaf = isNaN(Number(res?.data?.treeLeaf)) ? 0 : Number(res?.data?.treeLeaf);
          pageForm.value.treeLevel = res?.data?.treeLevel ?? 0;
          pageForm.value.treeName = res?.data?.treeName ?? '';
          pageForm.value.treeNames = res?.data?.treeNames ?? '';
          pageForm.value.treeSort = res?.data?.treeSort ?? '';
          pageForm.value.treeType = res?.data?.treeType ?? '';
          pageForm.value.treeTypeText = res?.data?.treeTypeText ?? '';

          pageForm.value.departmentId = res?.data?.departmentId ? [res?.data?.departmentId] : [];
          pageForm.value.departmentName = res?.data?.departmentName ?? '';
          pageForm.value.effectiveStartTime = res?.data?.effectiveStartTime
            ? new Date(res?.data?.effectiveStartTime)
            : new Date();
          pageForm.value.effectiveEndTime = res?.data?.effectiveEndTime ? new Date(res?.data?.effectiveEndTime) : null;
        } else {
          pageForm.value = initialTree;
        }
      } catch (error) {
        pageForm.value = initialTree;
      } finally {
        loading.value = false;
      }
    };
    // 关闭弹框
    const handleClose = () => {
      visible.value = false;

      pageForm.value = initialTree;
    };
    // 生成节点类型
    const initNodeType = () => {
      const dataList = cloneDeep(props.nodeTypeDataList);
      dataList.shift();
      dataList.unshift({ name: '空', code: '' });
      nodeTypeList.value =
        pageForm.value?.nodeType !== TM_NODE_TYPES.医院
          ? dataList?.filter((item: any) => {
              return item?.code !== TM_NODE_TYPES.医院 || item?.name !== '医院';
            })
          : dataList;
    };
    /**
     * 查询详情
     * @param id
     */
    const initDepartment = async () => {
      try {
        const promiseArr = [
          treeManageService.getTreeList({
            keyword: '',
            nodeType: '',
            treeType: TM_TREE_TYPE.科室树,
          }),
          treeManageService.queryTreeDepartmentHistory(pageForm.value.id),
        ];
        departmentLoading.value = true;
        const resArr = await Promise.all(promiseArr);
        if (resArr?.length) {
          // 科室树
          if (resArr?.[0]?.data) {
            departmentList.value = resArr?.[0]?.data ?? [];
            departmentExpandedKeys.value = departmentList.value?.length
              ? getTreeExpandKeys(departmentList.value, 'id', 'childTree')?.map((item) => {
                  return item;
                })
              : [];
          } else {
            departmentList.value = [];
          }

          // 历史数据
          if (resArr?.[1]?.data) {
            historyList.value = resArr?.[1]?.data ?? [];
          } else {
            historyList.value = [];
          }
        }
      } catch (error) {
        departmentList.value = [];

        historyList.value = [];
      } finally {
        loading.value = false;
        departmentLoading.value = false;
      }
    };

    /**
     * 切换节点类型
     * @param value
     */
    const handleNodeTypeChange = async (value: string) => {
      pageForm.value.nodeType = value;
      pageForm.value.hospitalCode = [];
      pageForm.value.departmentId = [];
      pageForm.value.effectiveStartTime = new Date();
      pageForm.value.effectiveEndTime = null;

      initLocation();

      if (pageForm.value.nodeType === TM_NODE_TYPES.科室) {
        try {
          departmentLoading.value = true;
          const res = await treeManageService.getTreeList({
            keyword: '',
            nodeType: '',
            treeType: TM_TREE_TYPE.科室树,
          });
          if (res?.code === 200) {
            departmentList.value = res?.data ?? [];
            departmentExpandedKeys.value = departmentList.value?.length
              ? getTreeExpandKeys(departmentList.value, 'id', 'childTree')?.map((item) => {
                  return item;
                })
              : [];
          } else {
            departmentList.value = [];
          }
        } catch (error) {
          departmentList.value = [];
        } finally {
          departmentLoading.value = false;
        }
      }
    };
    /**
     * 切换科室属性
     * @param treeId
     * @param treeName
     */
    const handleDepartmentChange = (treeId: string, treeName: string) => {
      pageForm.value.departmentName = treeName ?? '';
    };
    /**
     * 查询空间中心
     */
    const initLocation = async () => {
      try {
        locationLoading.value = true;
        locationList.value = await querySpaceCenterListByType(
          pageForm.value.nodeType as string,
          props.searchedTreeType,
          pageForm.value.id,
        );
        locationExpandedKeys.value = locationList.value?.length
          ? getTreeExpandKeys(locationList.value, 'code', 'children')?.map((item) => {
              return item;
            })
          : [];
      } catch (error) {
        locationList.value = [];
      } finally {
        locationLoading.value = false;
      }
    };
    /**
     * 弹窗新增
     */
    const handleSubmit = () => {
      editFormRef.value.validate((valid: boolean) => {
        if (valid) {
          // 如果节点类型是科室,且科室属性置空,则进行提示
          if (
            pageForm.value.nodeType === TM_NODE_TYPES.科室 &&
            (!pageForm.value.departmentId || !pageForm.value.departmentId?.length)
          ) {
            ElMessage.info('该段时间科室属性被清空，请确认');
          }
          handleTreeEdit();
        }
      });
    };
    /**
     * 编辑树
     */
    const handleTreeEdit = async () => {
      if (submitting.value) {
        return;
      }
      submitting.value = true;
      let params: TM_ITreeEditorParams = {
        hospitalCode: pageForm.value.hospitalCode?.length ? pageForm.value.hospitalCode[0] : '',
        id: pageForm.value.id ?? '',
        parentId: pageForm.value.parentId,
        treeLeaf: pageForm.value.treeLeaf ?? '',
        treeLevel: pageForm.value.treeLevel,
        treeName: pageForm.value.treeName,
        treeSort: pageForm.value.treeSort,
        nodeType: pageForm.value.nodeType,
        treeType: pageForm.value.treeType,
      };

      if (mapDepartmentFormItem()) {
        params = {
          ...params,
          departmentId: pageForm.value?.departmentId?.length ? pageForm.value.departmentId[0] : '',
          departmentName: pageForm.value?.departmentName,
          effectiveEndTime: pageForm.value.effectiveEndTime
            ? formatDate(pageForm.value.effectiveEndTime, 'yyyy-MM-dd')
            : '',
          effectiveStartTime: pageForm.value.effectiveStartTime
            ? formatDate(pageForm.value.effectiveStartTime, 'yyyy-MM-dd')
            : '',
        };
      }
      await treeManageService
        .editTree(params)
        .then((res: any) => {
          if (res && res.success && res?.code === 200) {
            visible.value = false;
            message.success((res && res.message) || '操作成功');
            // 编辑时，不重新刷新列表，需要改变列表中对应的值
            editNode.treeName = params.treeName;
            editNode.treeSort = params.treeSort;
            editNode.departmentName = res.data?.departmentName;
            editNode.nodeTypeText = nodeTypeToText(params.nodeType);
            editNode.hospitalName = hospitalCodeToName(params.hospitalCode);
            emit('editSuccess');
          } else {
            if (!String((res as any)?.code)?.includes('4f0') && (res as any)?.code !== 401) {
              message.error((res && res.message) || '操作失败');
            }
          }
        })
        .catch((error: Error) => {
          message.error('操作失败');
        })
        .finally(() => {
          submitting.value = false;
        });
    };

    function nodeTypeToText(code: string) {
      let res = '';
      if (code) {
        nodeTypeList.value.forEach((item) => {
          if (item.code === code) {
            res = item.name;
          }
        });
      }
      return res;
    }
    function hospitalCodeToName(code: string) {
      let res = '';
      function traverseTree(arr: TM_ILocationVO[]) {
        for (let i = 0; i < arr.length; i++) {
          if (arr[i].code === code) {
            res = arr[i].name;
            return;
          }
          if (arr[i].children?.length !== 0) {
            traverseTree(arr[i].children);
          }
        }
      }
      traverseTree(locationList.value);
      return res;
    }
    return {
      visible,
      editFormRef,
      rules,
      locationList,
      nodeTypeList,
      loading,
      pageForm,
      departmentList,
      historyList,
      TM_NODE_TYPES,
      TM_DefaultProps,
      TM_NodeKey,
      customPrefix,
      customClose,
      locationExpandedKeys,
      locationLoading,
      departmentLoading,
      departmentExpandedKeys,

      handleClose,
      handleDepartmentChange,
      handleShow,
      handleNodeTypeChange,
      mapStartDateDisabled,
      mapEndDateDisabled,
      handleSubmit,
      mapHospitalCodeFormItem,
      mapDepartmentFormItem,
      mapNodeType,
    };
  },
});
